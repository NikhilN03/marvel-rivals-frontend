/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List threads (most recent activity) */
        get: {
            parameters: {
                query?: {
                    cursor?: string | null;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PageThread"];
                    };
                };
            };
        };
        put?: never;
        /** Create a new thread (authenticated users only) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title: string;
                        body: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Thread"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                413: components["responses"]["TooLarge"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{threadId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a thread by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    threadId: components["parameters"]["threadId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Thread"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/threads/{threadId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List comments for a thread (chronological) */
        get: {
            parameters: {
                query?: {
                    /** @description Return only comments createdAt >= since (epoch_ms) */
                    since?: number | null;
                    cursor?: string | null;
                    limit?: number;
                };
                header?: never;
                path: {
                    threadId: components["parameters"]["threadId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PageComment"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        /** Add a comment (anonymous allowed but rate-limited; users have higher daily cap) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        body: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Comment"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                413: components["responses"]["TooLarge"];
                429: components["responses"]["RateLimited"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/comments/{commentId}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Like a comment (authenticated only) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rankings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Top players by region */
        get: {
            parameters: {
                query?: {
                    region?: "GLOBAL" | "NA" | "EU" | "ASIA" | "SA";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RankingsPayload"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recent news (admin curated) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["NewsItem"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Remaining posting limits for today */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            subjectType: "ANON" | "USER";
                            remainingCommentsToday: number;
                            dailyLimit: number;
                            /** Format: int64 */
                            resetAt: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Thread: {
            id: string;
            title: string;
            authorId?: string | null;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            lastActivityAt: number;
            postCount: number;
        };
        Comment: {
            id: string;
            threadId: string;
            authorId?: string | null;
            body: string;
            /** Format: int64 */
            createdAt: number;
            likes: number;
        };
        PageThread: {
            items: components["schemas"]["Thread"][];
            cursor?: string | null;
        };
        PageComment: {
            items: components["schemas"]["Comment"][];
            cursor?: string | null;
        };
        RankingRow: {
            playerId: string;
            playerName: string;
            rank: number;
            rating: number;
            countryCode: string;
            avatarUrl?: string | null;
            /** Format: float */
            winRate: number;
            /** Format: float */
            kda: number;
            /** Format: float */
            adr: number;
            /** Format: date-time */
            updatedAt: string;
        };
        RankingsPayload: {
            /** Format: date-time */
            updatedAt: string;
            players: components["schemas"]["RankingRow"][];
            /** @enum {string|null} */
            requestedRegion?: "GLOBAL" | "NA" | "EU" | "ASIA" | "SA" | null;
            /** @enum {string|null} */
            effectiveRegion?: "GLOBAL" | "NA" | "EU" | "ASIA" | "SA" | null;
            isGlobalFallback?: boolean | null;
            note?: string | null;
        };
        NewsItem: {
            id: string;
            title: string;
            date: string;
            summary: string;
            imageUrl: string;
            link?: string | null;
        };
        Error: {
            code: string;
            message: string;
            details?: {
                [key: string]: unknown;
            };
        };
    };
    responses: {
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Request entity too large */
        TooLarge: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Rate limit exceeded */
        RateLimited: {
            headers: {
                /** @description Seconds until retry */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        threadId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
